// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package db

import (
	"context"
)

const findBYEmail = `-- name: FindBYEmail :one
SELECT id, username, email, password
FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) FindBYEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findBYEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const findBYUsername = `-- name: FindBYUsername :one
SELECT id, username, email, password
FROM users
WHERE username = $1
LIMIT 1
`

func (q *Queries) FindBYUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, findBYUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const registerUser = `-- name: RegisterUser :one
INSERT INTO users (
  username,
  email,
  password
) VALUES (
  $1, $2, $3
) RETURNING id, username, email, password
`

type RegisterUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, registerUser, arg.Username, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
	)
	return i, err
}
