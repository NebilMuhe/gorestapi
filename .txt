Scenario:  Invalid Email Format
    Given I am registering with an invalid email format,
    When I submit the registration form,
    Then the system should return an error message indicating that the email format is invalid.
  Scenario: Weak Password Handling
    Given I am registering with a weak password,
    When I submit the registration form,
    Then the system should return an error message indicating that the password is not strong enough. 
  Scenario: Username Length Requirement
    Given I am registering with a username less than 5 characters long,
    When I submit the registration form,
    Then the system should return an error message indicating that the username must be at least 5 characters long.
  Scenario: Password Strength Requirement
    Given I am registering with a password that does not meet the strength requirements,
    When I submit the registration form,
    Then the system should return an error message indicating the password requirements (e.g., at least 8 characters long, with at least one uppercase letter, one lowercase letter, one digit, and one special character).
 Scenario:Login with Valid Credentials 
    Given I am a registered user with valid credentials,
    When I log in with my username and password,
    Then the system should generate a JWT token for authentication and issue a refresh token
 Scenario: Login with Invalid Username
    Given I am attempting to log in with an invalid username,
    When I submit the login form,
    Then the system should return an error message indicating that the username is not registered.
 Scenario: Login with Invalid Password 
   Given I am attempting to log in with an invalid password,
   When I submit the login form,
   Then the system should return an error message indicating that the password is incorrect.


  CREATE TABLE "users" (
    "id" UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    "username" STRING NOT NULL UNIQUE,
    "email" STRING NOT NULL UNIQUE,
    "password" STRING NOT NULL
);

CREATE TABLE "sessions" (
     "id" UUID PRIMARY KEY DEFAULT gen_random_uuid(),
     username STRING NOT NULL UNIQUE,
     refresh_token STRING NOT NULL,
     is_used BOOL NULL DEFAULT false
);

ALTER TABLE "sessions" ADD FOREIGN KEY ("username") REFERENCES "users" ("username") ON DELETE CASCADE;

DROP TABLE IF EXISTS "users";

DROP TABLE IF EXISTS "sessions";

-- name: RegisterUser :one
INSERT INTO users (
  username,
  email,
  password
) VALUES (
  $1, $2, $3
) RETURNING *;

-- name: FindBYEmail :one
SELECT *
FROM users
WHERE email = $1
LIMIT 1;

-- name: FindBYUsername :one
SELECT *
FROM users
WHERE username = $1
LIMIT 1;

-- name: LoginUser :one
SELECT *
FROM users
WHERE username = $1
LIMIT 1;

-- name: CreateSession :one
INSERT INTO sessions (
  username,
  refresh_token
) VALUES (
  $1, $2
) RETURNING *;

-- name: IsLoggedIn :one
SELECT *
FROM sessions
WHERE username = $1
LIMIT 1;

-- name: UpdateSession :one
UPDATE sessions
SET refresh_token = $1
WHERE username = $2
RETURNING *;

-- name: DeleteTable :many
DELETE FROM users RETURNING *;



